@using System.Linq;

@{
    Layout = null; // Ensure no layout is applied
}

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@Model.Name's CV</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        body {
            font-family: 'Helvetica Neue', Arial, sans-serif;
            color: #212529;
            background-color: #f8f9fa;
        }

        .header {
            background-color: #343a40;
            color: white;
            text-align: center;
            padding: 20px;
        }

        .header h1 {
            margin: 0;
            font-size: 2.5rem;
        }

        .header p {
            margin: 5px 0;
            font-size: 1rem;
        }

        .section {
            margin: 20px auto;
            padding: 15px;
            background-color: white;
            border: 1px solid #ddd;
            border-radius: 8px;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        }

        .section-title {
            font-size: 1.4rem;
            color: #007bff;
            margin-bottom: 15px;
            border-bottom: 2px solid #007bff;
            padding-bottom: 5px;
        }

        ul {
            padding-left: 20px;
        }

        ul li {
            margin-bottom: 8px;
            line-height: 1.5;
        }

        .footer {
            text-align: center;
            margin-top: 30px;
        }

        .btn-custom {
            background-color: #343a40;
            color: white;
        }

        .btn-custom:hover {
            background-color: #495057;
            color: white;
        }
    </style>
</head>

<body style="width: 25cm; margin: 0 auto; padding: 0;">
    <!-- Header -->
    <div class="header">
        <h1>@Model.Name</h1>
        <p>@Model.Email | @Model.Phone | @Model.Address</p>
    </div>

    <div class="container">
        <!-- Professional Summary Section -->
        <div class="section">
            <h2 class="section-title">Professional Summary</h2>
            <p>@Model.ProfessionalSummary</p>
        </div>

        <!-- Work Experience Section -->
        <div class="section">
            <h2 class="section-title">Work Experience</h2>
            <ul>
                @foreach (var experience in @Model.WorkExperience.Split("\n"))
                {
                    var details = experience.Split(',');
                    <li>
                        <strong>@details[0]</strong> at <em>@details[1]</em> <br>
                        <span>@details[2]</span>
                    </li>
                }
            </ul>
        </div>

        <!-- Education Section -->
        <div class="section">
            <h2 class="section-title">Education</h2>
            <ul>
                @foreach (var education in @Model.EducationBackground.Split("\n"))
                {
                    var details = education.Split(',');
                    <li>
                        <strong>@details[0]</strong> <br>
                        <span>@details[1], Class of @details[2]</span>
                    </li>
                }
            </ul>
        </div>

        <!-- Skills Section -->
        <div class="section">
            <h2 class="section-title">Skills</h2>
            <ul>
                @foreach (var skill in @Model.Skills.Split("\n"))
                {
                    var details = skill.Split(',');
                    <li>
                        <strong>@details[0]</strong> <span class="text-muted">(@details[1])</span>
                    </li>
                }
            </ul>
        </div>

        <!-- Languages Section -->
        <div class="section">
            <h2 class="section-title">Languages</h2>
            <ul>
                @foreach (var language in @Model.Languages.Split("\n"))
                {
                    var details = language.Split(',');
                    <li>
                        <strong>@details[0]</strong> <span class="text-muted">(@details[1] proficiency)</span>
                    </li>
                }
            </ul>
        </div>

        @if (Context.Request.Path.Value.ToLower().StartsWith("/cv/preview"))
        {
            var previewID = int.Parse(Context.Request.Path.Value.Split("/").Last());

            <div class="container text-center mb-4 justify-content-between">
                <a href="/cv/" class="btn btn-primary me-5" style="min-width: 120px;">Back</a>
                @for (int i = 1; i <= 3; i++)
                {
                    if (i == previewID)
                    {
                        <a href="/cv/preview/@i" class="btn btn-primary me-5" style="min-width: 120px;">Preview @i</a>
                    }
                    else
                    {
                        <a href="/cv/preview/@i" class="btn btn-outline-primary me-5" style="min-width: 120px;">Preview @i</a>
                    }
                }
                <a href="/cv/pdf/@previewID" class="btn btn-success ms-5" style="min-width: 120px;">Download CV</a>
            </div>
        }
    </div>
</body>

</html>
